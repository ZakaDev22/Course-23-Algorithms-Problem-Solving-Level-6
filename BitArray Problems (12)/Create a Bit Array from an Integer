

using System.Collections;
using System.Text;

string Value = ConvertToBinaryUsingStrngBuilder(10); // 1010

BitArray Bits = FillStringBitsInTheArray(Value);

Console.WriteLine($"\n\n Result Of 10 IS : {BitArrayToString(Bits)}");

static BitArray FillStringBitsInTheArray(string bits)
{
    BitArray Bits = new(bits.Length);
    int i = 0;
    foreach (char ch in bits)
    {
        Bits[i] = ch == '1' ? true : false;
        i++;
    }

    return Bits;
}

string ConvertToBinaryUsingStrngBuilder(int value)
{
    StringBuilder sb = new();

    while (value > 0)
    {
        sb.Insert(0, value % 2);
        value /= 2;
    }

    return sb.ToString();
}

static string BitArrayToString(BitArray bitArray)
{
    char[] chars = new char[bitArray.Length];
    for (int i = 0; i < bitArray.Length; i++)
    {
        chars[i] = bitArray[i] ? '1' : '0';
    }
    return new string(chars);
}

// Teacher Sol :


int number = 10; // Binary: 1010
BitArray bits = IntToBitArray(number);


Console.Write("BitArray representation of " + number + ": ");
bool leadingZero = true; // To suppress leading zeros
for (int i = bits.Length - 1; i >= 0; i--)
{
    if (bits[i])
    {
        leadingZero = false;
    }
    if (!leadingZero)
    {
        Console.Write(bits[i] ? "1" : "0");
    }
}


// In case the number is 0, print a single "0"
if (leadingZero)
{
    Console.Write("0");
}

static BitArray IntToBitArray(int number)
{
    return new BitArray(new[] { number });
}
