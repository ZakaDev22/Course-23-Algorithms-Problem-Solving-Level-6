

List<int> Numbers = new([100, 4, 200, 1, 3, 2, 0, 5]);
HashSet<int> Set = new HashSet<int>();

Numbers = Numbers.Order().ToList();

for (int i = 0; i < Numbers.Count; i++)
{


    if (!Set.Contains(Numbers[i]))
    {
        Set.Add(Numbers[i]);

        // I check If The Next Item (100) - Last Aded Item (5) > 1
        if (Numbers[i + 1] - Set.LastOrDefault() > 1)
        {
            break;
        }

    }
}

Console.WriteLine($"\n\n {Set.Count} , sequence : {string.Join(", ", Set)}");

// Teacher Solution : 

int[] nums = { 100, 4, 200, 1, 3, 2 };

Console.WriteLine(LongestConsecutive(nums));

static int LongestConsecutive(int[] nums)
{
    HashSet<int> set = new HashSet<int>(nums);
    int longestStreak = 0;


    foreach (int num in set)
    {
        if (!set.Contains(num - 1))
        {
            int currentNum = num;
            int currentStreak = 1;


            while (set.Contains(currentNum + 1))
            {
                currentNum++;
                currentStreak++;
            }


            longestStreak = Math.Max(longestStreak, currentStreak);
        }
    }


    return longestStreak;
}
