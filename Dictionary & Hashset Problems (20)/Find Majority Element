

List<int> Numbers = new([1, 2, 3, 4, 3, 5, 6, 3, 7, 3]);

Dictionary<int, int> frequencies = new();

foreach (var item in Numbers)
{
    if (!frequencies.ContainsKey(item))
        frequencies[item] = 1;
    else
        frequencies[item]++;
}

var result = frequencies.FirstOrDefault(x => x.Value == frequencies.Values.Max());

Console.WriteLine($"\n\n element appearing more than n/2 times Is : {result.Key} With Number Of {result.Value} times");

// Teacher Solution : 

int[] nums = { 3, 2, 3 };
Console.WriteLine(MajorityElement(nums)); // Output: 3

static int MajorityElement(int[] nums)
{
    Dictionary<int, int> counts = new Dictionary<int, int>();

    int majorityCount = nums.Length / 2;

    foreach (int num in nums)
    {
        if (!counts.ContainsKey(num))
            counts[num] = 0;

        counts[num]++;

        if (counts[num] > majorityCount)
            return num;
    }

    return -1; // This line should not be reached in valid input
}
