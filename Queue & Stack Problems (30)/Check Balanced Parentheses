

string Parentheses = "({[]})";

Console.WriteLine($"\n\n True Parentheses Result Is :  {IsBalancedParentheses(Parentheses)}");


string FalseParentheses = "({[)]}";

Console.WriteLine($"\n\n False Parentheses Result Is :  {IsBalancedParentheses(FalseParentheses)}");


static (Stack<char> firstHalf, Queue<char> secondHalf) BreakTheStringToTwoHalfes(string s)
{
    Stack<char> firstHalf = new();
    Queue<char> secondHalf = new();

    int HalfCount = s.Length / 2;

    for (int i = 0; i < s.Length; i++)
    {
        if (i < HalfCount)
        {
            firstHalf.Push(s[i]);
        }
        else
        {
            secondHalf.Enqueue(s[i]);
        }
    }

    return (firstHalf, secondHalf);
}

static bool IsBalancedParentheses(string Parentheses)
{

    var charTupel = BreakTheStringToTwoHalfes(Parentheses);

    Stack<char> firstHalf = charTupel.firstHalf;
    Queue<char> secondHalf = charTupel.secondHalf;

    int rightBrackets = 0;

    for (int i = 0; i < Parentheses.Length / 2; i++)
    {
        char character = firstHalf.Pop();

        switch (character)
        {
            case '(':
                {
                    rightBrackets = 41; // ')'

                    if ((char)rightBrackets != secondHalf.Dequeue())
                    {
                        return false;
                    }

                    break;
                }

            case '{':
                {
                    rightBrackets = 125; // '}'

                    if ((char)rightBrackets != secondHalf.Dequeue())
                    {
                        return false;
                    }

                    break;
                }

            case '[':
                {
                    rightBrackets = 93; // ']'

                    if ((char)rightBrackets != secondHalf.Dequeue())
                    {
                        return false;
                    }

                    break;
                }
        }
    }

    return true;
}

// Teacher Method : 

static bool IsBalanced(string input)
{
    Stack<char> stack = new Stack<char>();


    foreach (char c in input)
    {
        if (c == '(' || c == '{' || c == '[')
        {
            stack.Push(c); // Push opening brackets
        }
        else if (c == ')' || c == '}' || c == ']')
        {
            if (stack.Count == 0)
                return false; // No matching opening bracket


            char top = stack.Pop();


            if ((c == ')' && top != '(') ||
                (c == '}' && top != '{') ||
                (c == ']' && top != '['))
            {
                return false; // Mismatched brackets
            }
        }
    }


    return stack.Count == 0; // Stack should be empty if balanced
}
