Queue<int> queue1 = new([1, 3, 5]), queue2 = new([2, 4, 6]);

Queue<int> MergedQueue = new Queue<int>();

static Queue<int> MergeTwoSortedQueues(Queue<int> MergedQueue, Queue<int> queue1, Queue<int> queue2)
{
    // Here I fill The First Queue In the Original
    while (queue1.Count > 0)
    {
        MergedQueue.Enqueue(queue1.Dequeue());
    }

    // Here I fill The Second One In the Original
    while (queue2.Count > 0)
    {
        MergedQueue.Enqueue(queue2.Dequeue());
    }

    // here I use Linq Method To Generate A Sorted Queue From The Original Queue Itself
    MergedQueue = new(MergedQueue.OrderBy(x => x).ToList());


    return MergedQueue;
}

// here i send The Three Queues To The Merge Method
MergedQueue = MergeTwoSortedQueues(MergedQueue, queue1, queue2);

Console.WriteLine($"The Original Queue After I Insert Two Queues And Merge Theme : {string.Join(", ", MergedQueue)}");

//-----------------------------------------------------------------------
// Teacher Solution : 

// This Solution Will Work Only If The Two Queues Count Are Equal
// But In this Case : ðŸ‘‡ðŸ‘‡ðŸ‘‡
// Queue<int> q1 = new Queue<int>(new[] { 1, 3, 5, 33, 22, 77 });
// Queue<int> q2 = new Queue<int>(new[] { 2, 4, 6, 666, 345, 888, 98, 231, 334 });

// Result: 1, 2, 3, 4, 5, 6, 33, 22, 77, 666, 345, 888, 98, 231, 334

//The Problem Is In the Algorithm In The First Wihle Loop
//If The Count Of Each Queue Become 0 And The Other Queue is Not Then The Other While Loops Will Only Insert The Remain Elements

//We Have To Use Linq Method To .OrderBy(x => x) Like I did In My Solution

//MergedQueue = new(MergedQueue.OrderBy(x => x).ToList());

//then we can return The Queue Without Any Issue âœ…

static Queue<int> MergeQueues(Queue<int> q1, Queue<int> q2)
{
    Queue<int> merged = new Queue<int>();


    while (q1.Count > 0 && q2.Count > 0)
    {
        if (q1.Peek() <= q2.Peek())
            merged.Enqueue(q1.Dequeue());
        else
            merged.Enqueue(q2.Dequeue());
    }


    while (q1.Count > 0)
    {
        merged.Enqueue(q1.Dequeue());
    }


    while (q2.Count > 0)
    {
        merged.Enqueue(q2.Dequeue());
    }


    return merged;
}

Queue<int> q1 = new Queue<int>(new[] { 1, 3, 5, 33, 22, 77 });
Queue<int> q2 = new Queue<int>(new[] { 2, 4, 6, 666, 345, 888, 98, 231, 334 });
Queue<int> mergedQueue = MergeQueues(q1, q2);
Console.WriteLine(string.Join(", ", mergedQueue)); // O1, 2, 3, 4, 5, 6
