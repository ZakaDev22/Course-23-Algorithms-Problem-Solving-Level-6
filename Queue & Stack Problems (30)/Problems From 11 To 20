

// # Problem 11

/*int[] numbers = { 1, 2, 3, 4, 5 };
Queue<int> Queue1 = new Queue<int>(numbers);
// My First Solution

var ReversedNumbers = new Queue<int>(Queue1.Reverse());

Console.WriteLine("\n\n Normal Queue1 :");
while (Queue1.Count > 0)
{
    Console.WriteLine($" Number : {Queue1.Dequeue()}");
}

Console.WriteLine("\n\n Reversed Queue1 :");
while (ReversedNumbers.Count > 0)
{
    Console.WriteLine($" Number : {ReversedNumbers.Dequeue()}");
}

// Solutions Using Queue And Stack 

int[] numbers2 = { 1, 2, 3, 4, 5 };
Queue<int> Numbers2 = new Queue<int>(numbers2);

Console.WriteLine("\n\n Normal Queue1 2 :");
for (int i = 0; i < numbers2.Length; i++)
{
    Console.WriteLine($" Number : {numbers2[i]}");
}

Stack<int> StackNumbers = new Stack<int>();

while (Numbers2.Count > 0)
{
    StackNumbers.Push(Numbers2.Dequeue());
}

Console.WriteLine("\n\n Printing Reversed Elements Using Stack :");

while (StackNumbers.Count > 0)
{
    Console.WriteLine($" Number : {StackNumbers.Pop()}");
}

// Teacher Solution : 

static Queue<int> ReverseQueue(Queue<int> queue)
{
    Stack<int> stack = new Stack<int>();
    while (queue.Count > 0)
    {
        stack.Push(queue.Dequeue());
    }
    while (stack.Count > 0)
    {
        queue.Enqueue(stack.Pop());
    }
    return queue;
}


static void Main()
{
    Queue<int> queue = new Queue<int>(new[] { 1, 2, 3, 4, 5 });
    Queue<int> reversedQueue = ReverseQueue(queue);
    Console.WriteLine(string.Join(", ", reversedQueue)); // Output: 5, 4, 3, 2, 1
    Console.ReadKey();
}
*/

// # Problem 12

/*static Queue<int> ReverseQueue(Queue<int> queue)
{
    Stack<int> stack = new();
    while (queue.Count > 0)
    {
        stack.Push(queue.Dequeue());
    }
    while (stack.Count > 0)
    {
        queue.Enqueue(stack.Pop());
    }
    return queue;
}

int[] numbers = { 1, 2, 3, 2, 1 };
Queue<int> Queue1 = new Queue<int>(numbers);

static bool IsQueueHavePalandromNumbers(Queue<int> Queue1)
{
    var tempQueue = new Queue<int>(Queue1);

    var Queue2 = ReverseQueue(tempQueue);

    while (Queue1.Count > 0)
    {
        if (Queue1.Dequeue() != Queue2.Dequeue())
            return false;
    }


    return true;

}

static string QueueResult(bool result)
{
    return result == true ? "Yes" : "No";
}

Console.WriteLine($""""

                   Is Queue 1 Equal To Queue 2 : {QueueResult(IsQueueHavePalandromNumbers(Queue1))}

                   """");

// Teacher Palindrom Method :

static bool IsPalindrome(Queue<int> queue)
{
    Stack<int> stack = new Stack<int>(queue);
    foreach (var item in queue)
    {
        if (stack.Pop() != item)
            return false;
    }
    return true;
}
*/

// # Problem 13

/* using System.Text;

string ConvertToBinaryUsingStringBuilder(int value)
{
    StringBuilder sb = new();

    while (value > 0)
    {
        sb.Insert(0, value % 2);
        value /= 2;
    }

    return sb.ToString();
}

int N = 8;
int[] numbers = new int[N];

Random random = new Random();

for (int i = 0; i < N; i++)
{
    numbers[i] = random.Next(1, 50);
}

Console.WriteLine($" Array Of Random Numbers : {string.Join(", ", numbers)}");

Queue<string> queueOfBinaryValues = new();

foreach (int item in numbers)
{
    queueOfBinaryValues.Enqueue(ConvertToBinaryUsingStringBuilder(item));
}

Console.WriteLine($" Array Of Random Numbers After Convert Them To Binary : {string.Join(", ", queueOfBinaryValues)}");


Console.WriteLine();


// Teacher Method To Generate Binary Numbers From 1 To N :
static void GenerateBinaryNumbers(int n)
{
    Queue<string> queue = new Queue<string>();
    queue.Enqueue("1");


    for (int i = 0; i < n; i++)
    {
        string binary = queue.Dequeue();
        Console.Write(binary + ",  ");
        queue.Enqueue(binary + "0");
        queue.Enqueue(binary + "1");
    }
}

GenerateBinaryNumbers(5);
*/

// # Problem 14

/* Queue<int> queue = new Queue<int>([5, 1, 3, 2, 4]);

var queueWithAscendingOrder = queue.OrderBy(x => x);

var queueWithDescendingOrder = queue.OrderByDescending(x => x);
//-----------------------------------------------------------------------------

Console.WriteLine($"Queue Elements With Input Order : {string.Join(", ", queue)}"); // 5 1 3 2 4

Console.WriteLine($"Queue Elements With ascending Order : {string.Join(", ", queueWithAscendingOrder)}"); // 1 2 3 4 5

Console.WriteLine($"Queue Elements With Descending Order : {string.Join(", ", queueWithDescendingOrder)}"); // 5 4 3 2 1


//===========================

// Teacher Sort Method : 

static Queue<int> SortQueue(Queue<int> queue)
{
    //this will generate a list from a queue
    List<int> list = new List<int>(queue);
    list.Sort();


    // this will generate a queue from list
    return new Queue<int>(list);
}
*/

// # Problem 15 

/* Queue<int> numbers = new([1, 2, 3, 4, 5, 6,]);

Console.WriteLine($"Normal Numbers : {string.Join(", ", numbers)}");


static Queue<int> MyInterleaveQueue(Queue<int> numbers)
{


    Queue<int> FirstHalf = new(), SecondHalf = new();

    int QueueTotalNumbers = numbers.Count;
    int queueHalfNumber = numbers.Count / 2;

    // here i will Fill The First And SecondHalf Stack
    for (int i = 0; i < QueueTotalNumbers; i++)
    {
        if (i < queueHalfNumber)
        {
            FirstHalf.Enqueue(numbers.Dequeue());
        }
        else
        {
            SecondHalf.Enqueue(numbers.Dequeue());
        }
    }

    // here i will Insert In The Original Queue From Both Halfs In the same Time One Element Each Time So 2 * (queueHalfNumber = 3)  == 6 Elements
    while (queueHalfNumber > 0)
    {
        numbers.Enqueue(FirstHalf.Dequeue());
        numbers.Enqueue(SecondHalf.Dequeue());

        // here i sub the queue half count by 1 So the Wile Loop We Break If The The First ANd Half Queue Is Empty
        queueHalfNumber -= 1;
    }

    return numbers;
}

// Send The Current Queue The Method That Will Interleave it
MyInterleaveQueue(numbers);

Console.WriteLine($""""

                   Interleave the first half of a queue with the second half.

                   Result = {string.Join(", ", numbers)}

                   """");

// Teacher Solotion : 

Queue<int> queue = new Queue<int>(new[] { 1, 2, 3, 4, 5, 6 });
InterleaveQueue(queue);
Console.WriteLine(string.Join(", ", queue)); // Output: 1, 4, 2, 5, 3, 6

static void InterleaveQueue(Queue<int> queue)
{
    int halfSize = queue.Count / 2;
    Stack<int> stack = new Stack<int>();
    for (int i = 0; i < halfSize; i++)
    {
        stack.Push(queue.Dequeue());
    }

    while (stack.Count > 0)
    {
        queue.Enqueue(stack.Pop());
    }

    for (int i = 0; i < halfSize; i++) 
    {
        queue.Enqueue(queue.Dequeue());
    }

    for (int i = 0; i < halfSize; i++)
    {
        stack.Push(queue.Dequeue());
    }

    while (stack.Count > 0)
    {
        queue.Enqueue(stack.Pop());
        queue.Enqueue(queue.Dequeue());
    }
}
*/

// # Problem 16

/* Queue<int> numbers = new([1, 2, 3, 4, 5, 6]);

Console.WriteLine($"\n\n Normal Numbers Before Rotation By K : {string.Join(", ", numbers)}");

int K = 2;
for (int i = 0; i < K; i++)
{
    numbers.Enqueue(numbers.Dequeue());
}

Console.WriteLine($"\n\n Numbers After Rotation By K : {string.Join(", ", numbers)}");

// Teacher Method : 

static Queue<int> RotateQueue(Queue<int> queue, int k)
{
    for (int i = 0; i < k; i++)
    {
        queue.Enqueue(queue.Dequeue());
    }
    return queue;
}

*/

// # Problem 17

/* Queue<int> queue1 = new([1, 3, 5]), queue2 = new([2, 4, 6]);

Queue<int> MergedQueue = new Queue<int>();

static Queue<int> MergeTwoSortedQueues(Queue<int> MergedQueue, Queue<int> queue1, Queue<int> queue2)
{
    // Here I fill The First Queue In the Original
    while (queue1.Count > 0)
    {
        MergedQueue.Enqueue(queue1.Dequeue());
    }

    // Here I fill The Second One In the Original
    while (queue2.Count > 0)
    {
        MergedQueue.Enqueue(queue2.Dequeue());
    }

    // here I use Linq Method To Generate A Sorted Queue From The Original Queue Itself
    MergedQueue = new(MergedQueue.OrderBy(x => x).ToList());


    return MergedQueue;
}

// here i send The Three Queues To The Merge Method
MergedQueue = MergeTwoSortedQueues(MergedQueue, queue1, queue2);

Console.WriteLine($"The Original Queue After I Insert Two Queues And Merge Theme : {string.Join(", ", MergedQueue)}");

//-----------------------------------------------------------------------
// Teacher Solution : 

// This Solution Will Work Only If The Two Queues Count Are Equal
// But In this Case : ðŸ‘‡ðŸ‘‡ðŸ‘‡
// Queue<int> q1 = new Queue<int>(new[] { 1, 3, 5, 33, 22, 77 });
// Queue<int> q2 = new Queue<int>(new[] { 2, 4, 6, 666, 345, 888, 98, 231, 334 });

// Result: 1, 2, 3, 4, 5, 6, 33, 22, 77, 666, 345, 888, 98, 231, 334

//The Problem Is In the Algorithm In The First Wihle Loop
//If The Count Of Each Queue Become 0 And The Other Queue is Not Then The Other While Loops Will Only Insert The Remain Elements

//We Have To Use Linq Method To .OrderBy(x => x) Like I did In My Solution

//MergedQueue = new(MergedQueue.OrderBy(x => x).ToList());

//then we can return The Queue Without Any Issue âœ…

static Queue<int> MergeQueues(Queue<int> q1, Queue<int> q2)
{
    Queue<int> merged = new Queue<int>();


    while (q1.Count > 0 && q2.Count > 0)
    {
        if (q1.Peek() <= q2.Peek())
            merged.Enqueue(q1.Dequeue());
        else
            merged.Enqueue(q2.Dequeue());
    }


    while (q1.Count > 0)
    {
        merged.Enqueue(q1.Dequeue());
    }


    while (q2.Count > 0)
    {
        merged.Enqueue(q2.Dequeue());
    }


    return merged;
}

Queue<int> q1 = new Queue<int>(new[] { 1, 3, 5, 33, 22, 77 });
Queue<int> q2 = new Queue<int>(new[] { 2, 4, 6, 666, 345, 888, 98, 231, 334 });
Queue<int> mergedQueue = MergeQueues(q1, q2);
Console.WriteLine(string.Join(", ", mergedQueue)); // O1, 2, 3, 4, 5, 6

*/

// # Problem 18

/* MyFindFirstNonRepeating("aabcccddss");

// result : a       -       b       c       -       -       d       -       s       -

Console.WriteLine("\n\n");

static void MyFindFirstNonRepeating(string stream)
{
    Dictionary<char, int> countMap = new Dictionary<char, int>();
    Queue<char> queue = new Queue<char>();

    List<char> keyList;

    foreach (char ch in stream)
    {
        if (!countMap.ContainsKey(ch))
            countMap[ch] = 0;


        countMap[ch]++;
        queue.Enqueue(ch);

        // here i create a list so that i can track the dictionary keys each time and retrive the key
        keyList = new List<char>(countMap.Keys.ToList());

        while (queue.Count > 0 && countMap[queue.Peek()] > 1)
        {
            // here i check if the the last key in the list is equal to the peek of the queue so that it mean that the element is already exists
            // then i have to remove it and clear the queue for the next element
            while (keyList.LastOrDefault() == queue.Peek())
            {
                queue.Dequeue();

                if (queue.Count == 0)
                    break;
            }
        }


        // here i change the peek to dequeue so that is no need to clear the queue another time for the next element
        Console.Write(queue.Count > 0 ? queue.Dequeue() : '-');
        Console.Write("\t");
    }
}
*/

// # Problem 19

/*
// solution 1 : easy one

Stack<int> QueueUsingStacks1 = new([1, 2, 3, 4, 5]);

Stack<int> QueueUsingStacks2 = new(QueueUsingStacks1);

Console.WriteLine($""""

                    Queue Using Stack 1 : {string.Join(", ", QueueUsingStacks1)}
                   
                   """");

Console.WriteLine($""""

                    Queue Using Stack 2 :  {string.Join(", ", QueueUsingStacks2)}
                  
                   """");

// solution 2 : Using Class Methods

MyQueue MyQueue = new MyQueue();

MyQueue.Enqueue(1);
MyQueue.Enqueue(2);
MyQueue.Enqueue(3);
MyQueue.Enqueue(4);

Console.WriteLine($""""
                     Result :   {string.Join(", ", QueueUsingStacks1)}
                  """");

Console.WriteLine($"\n Dequeue Number 1 : {MyQueue.Dequeue()}");
Console.WriteLine($"\n Dequeue Number 2 : {MyQueue.Dequeue()}");
Console.WriteLine($"\n Dequeue Number 3 : {MyQueue.Dequeue()}");

Console.WriteLine($"\n\n My Peek Method : {MyQueue.Peek()}");

public class MyQueue
{
    private Stack<int> _Stack1, _stack2;

    public MyQueue()
    {
        _Stack1 = new();
        _stack2 = new();
    }

    public void Enqueue(int value)
    {
        _Stack1.Push(value);

        _stack2 = new(_Stack1);
    }
    public int Dequeue()
    {
        return _stack2.Pop();
    }

    public int Peek()
    {
        return _stack2.Peek();
    }


    public bool IsEmpty()
    {
        return _stack2.Count == 0;
    }
}

// Teacher Solution : 


class TeacherQueue
{
    private Stack<int> stack1 = new Stack<int>();
    private Stack<int> stack2 = new Stack<int>();


    public void Enqueue(int x)
    {
        stack1.Push(x);
    }


    public int Dequeue()
    {
        if (stack2.Count == 0)
        {
            while (stack1.Count > 0)
            {
                stack2.Push(stack1.Pop());
            }
        }
        return stack2.Pop();
    }


    public bool IsEmpty()
    {
        return stack1.Count == 0 && stack2.Count == 0;
    }
}
*/

// # Problem 20 

Queue<int> queue = new([1, 2, 3, 10, 4, 5, 15, 6]);

Console.WriteLine($"\n\n Normal Queue Before : {string.Join(", ", queue)}");

queue = MyRearrangeQueueAlternately(queue);
//queue = RearrangeAlternately(queue);

Console.WriteLine($"\n\n Normal Queue After : {string.Join(", ", queue)}");


static Queue<int> MyRearrangeQueueAlternately(Queue<int> queue)
{
    if (queue.Count == 0) return queue;

    Queue<int> FirstHalf = new Queue<int>();
    Stack<int> SecondHalf = new Stack<int>();
    int HalfCount = queue.Count / 2;

    // Sort The Queue By ASC In Case The Data Is Miss
    queue = new Queue<int>(queue.OrderBy(x => x));

    // fill The All The Elements In The First Half In a Temp Queue
    while (queue.Count > HalfCount)
    {
        FirstHalf.Enqueue(queue.Dequeue());
    }

    // fill The All The Elements In The Second Half In a Temp Stack
    while (queue.Count > 0)
    {
        SecondHalf.Push(queue.Dequeue());
    }

    // Fill The Original Queue With Both Temps Queue And Stack One Element Each Time 
    while (FirstHalf.Count > 0 || SecondHalf.Count > 0)
    {
        if (FirstHalf.Count > 0)
            queue.Enqueue(FirstHalf.Dequeue());

        if (SecondHalf.Count > 0)
            queue.Enqueue(SecondHalf.Pop());
    }


    return queue;
}

// My Teacher Method : 

static Queue<int> RearrangeAlternately(Queue<int> queue)
{
    List<int> list = new List<int>(queue.Order());
    int n = list.Count;
    Queue<int> result = new Queue<int>();


    for (int i = 0; i < n / 2; i++)
    {
        result.Enqueue(list[i]);
        result.Enqueue(list[n - i - 1]);
    }


    if (n % 2 != 0)
    {
        result.Enqueue(list[n / 2]);
    }


    return result;
}
